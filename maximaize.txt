using System;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interop;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private Rect _restoreBounds;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void ToggleMaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Normal)
            {
                SaveRestoreBounds();
                MaximizeWithoutTaskbar();
            }
            else
            {
                RestoreWindow();
            }
        }

        private void SaveRestoreBounds()
        {
            _restoreBounds = new Rect(this.Left, this.Top, this.Width, this.Height);
        }

        private void RestoreWindow()
        {
            this.WindowState = WindowState.Normal;
            this.Left = _restoreBounds.Left;
            this.Top = _restoreBounds.Top;
            this.Width = _restoreBounds.Width;
            this.Height = _restoreBounds.Height;
        }

        private void MaximizeWithoutTaskbar()
        {
            IntPtr hWnd = new WindowInteropHelper(this).Handle;
            IntPtr hMonitor = MonitorFromWindow(hWnd, MONITOR_DEFAULTTONEAREST);
            MONITORINFO monitorInfo = new MONITORINFO();
            monitorInfo.cbSize = Marshal.SizeOf(monitorInfo);
            GetMonitorInfo(hMonitor, ref monitorInfo);

            RECT workArea = monitorInfo.rcWork;

            this.WindowState = WindowState.Normal; // Ensure the window is not maximized before resizing
            this.Top = workArea.Top;
            this.Left = workArea.Left;
            this.Width = workArea.Right - workArea.Left;
            this.Height = workArea.Bottom - workArea.Top;
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                if (this.WindowState == WindowState.Normal)
                {
                    SaveRestoreBounds();
                    MaximizeWithoutTaskbar();
                }
                else
                {
                    RestoreWindow();
                }
            }
            else
            {
                this.DragMove();
            }
        }

        // P/Invoke declarations
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public class MONITORINFO
        {
            public int cbSize;
            public RECT rcMonitor;
            public RECT rcWork;
            public int dwFlags;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 0)]
        public struct RECT
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
        }

        private const int MONITOR_DEFAULTTONEAREST = 0x00000002;

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern bool GetMonitorInfo(IntPtr hMonitor, ref MONITORINFO lpmi);

        [DllImport("user32.dll")]
        private static extern IntPtr MonitorFromWindow(IntPtr hwnd, uint dwFlags);
    }
}
